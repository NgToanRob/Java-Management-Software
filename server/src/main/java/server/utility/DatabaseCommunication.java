package server.utility;

import common.utility.Outputer;
import server.App;

import java.sql.*;

/**
 * A class for handle database.
 */
public class DatabaseCommunication {
    // Table names
    public static final String ORGANIZATION_TABLE = "organization";
    public static final String USER_TABLE = "account";
    public static final String COORDINATES_TABLE = "coordinates";
    public static final String OFFICIAL_ADDRESS_TABLE = "officialAddress";
    public static final String ORGANIZATION_TYPE_TABLE = "organizationType";


    // Organization table column names
    public static final String ORGANIZATION_TABLE_ID_COLUMN = "id";
    public static final String ORGANIZATION_TABLE_NAME_COLUMN = "name";
    public static final String ORGANIZATION_TABLE_COORDINATES_ID_COLUMN = "coordinatesId";
    public static final String ORGANIZATION_TABLE_CREATION_DATE_COLUMN = "creationDate";
    public static final String ORGANIZATION_TABLE_ANNUAL_TURNOVER_COLUMN = "annualTurnover";
    public static final String ORGANIZATION_TABLE_ORGANIZATION_TYPE_ID_COLUMN = "organizationTypeId";
    public static final String ORGANIZATION_TABLE_ADDRESS_ID_COLUMN = "addressId";
    public static final String ORGANIZATION_TABLE_ACCOUNT_ID_COLUMN = "accountId";

    // Account table column names
    public static final String USER_TABLE_ID_COLUMN = "accountId";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_DISPLAY_NAME_COLUMN = "displayName";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";
    public static final String USER_TABLE_TYPE_COLUMN = "type";

    // Coordinates table column names
    public static final String COORDINATES_TABLE_ID_COLUMN = "coordinatesId";
    public static final String COORDINATES_TABLE_X_COLUMN = "x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "y";

    // Official address column names
    public static final String ADDRESS_TABLE_ID_COLUMN = "addressId";
    public static final String ADDRESS_TABLE_STREET_COLUMN = "street";
    public static final String ADDRESS_TABLE_ZIPCODE_COLUMN = "zipcode";

    // Organization type table column names
    public static final String ORGANIZATION_TYPE_TABLE_ID_COLUMN = "organizationTypeId";
    public static final String ORGANIZATION_TYPE_TABLE_TYPE_COLUMN = "type";

    // Type of database driver
    private final String JDBC_DRIVER = "org.postgresql.Driver";

    // Configures
    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DatabaseCommunication(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
    }

    /**
     * A class for connect to database.
     */
    private void connectToDataBase() {
        try {
            Class.forName(JDBC_DRIVER);
            connection = DriverManager.getConnection(url, user, password);
            Outputer.println("The database connection has been established.");
            App.logger.info("The database connection has been established.");
        } catch (SQLException exception) {
            Outputer.printerror("An error occurred while connecting to the database!");
            App.logger.error("An error occurred while connecting to the database!");
        } catch (ClassNotFoundException exception) {
            Outputer.printerror("Database management driver not found!");
            App.logger.error("Database management driver not found!");
        }
    }

    /**
     * It returns a prepared statement for the given SQL statement
     *
     * @param sqlStatement the SQL statement to be prepared.
     * @param generateKeys if true, the method will return a PreparedStatement object that will contain the auto-generated
     * keys produced by executing this Statement object.
     * @return PreparedStatement
     */
    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            //App.logger.info("Подготовлен SQL запрос '" + sqlStatement + "'.");
            return preparedStatement;
        } catch (SQLException exception) {
            //App.logger.error("Произошла ошибка при подготовке SQL запроса '" + sqlStatement + "'.");
            if (connection == null) App.logger.error("Database connection not established!");
            throw new SQLException(exception);
        }
    }

    /**
     * Close prepared statement.
     *
     * @param sqlStatement SQL statement to be closed.
     */
    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
            //App.logger.info("Закрыт SQL запрос '" + sqlStatement + "'.");
        } catch (SQLException exception) {
            //App.logger.error("Произошла ошибка при закрытии SQL запроса '" + sqlStatement + "'.");
        }
    }

    /**
     * Close connection to database.
     */
    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            Outputer.println("The connection to the database has been terminated.");
            App.logger.info("The connection to the database has been terminated.");
        } catch (SQLException exception) {
            Outputer.printerror("An error occurred while terminating the database connection!");
            App.logger.error("An error occurred while terminating the database connection!");
        }
    }

    /**
     * Set commit mode of database.
     */
    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            App.logger.error("An error occurred while setting the database transaction mode!");
        }
    }

    /**
     * Set normal mode of database.
     */
    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            App.logger.error("An error occurred while establishing normal database mode!");
        }
    }

    /**
     * Commit database status.
     */
    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            App.logger.error("An error occurred while validating the new database state!");
        }
    }

    /**
     * Roll back database status.
     */
    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            App.logger.error("An error occurred while reverting the original state of the database!");
        }
    }

    /**
     * Set save point of database.
     */
    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            App.logger.error("An error occurred while saving the database state!");
        }
    }
}
